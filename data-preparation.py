# -*- coding: utf-8 -*-
"""Task1_1301174532.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1zV04XJv-hWCf1Uj_go31cSD8MNMsgpVZ

# Task 01 - Data Preparation

Read the instructions at Google Classroom carefully. Happy Coding!
"""

Nama = "Fery Ardiansyah Effendi"
NIM = 1301174532

print("Hi! I'm {} with student ID: {}".format(Nama, NIM))

"""Here's all necessary libraries that you will use in this assignment. Do not add any additional libraries!"""

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
import pandas as pd

import seaborn as sns
import matplotlib.pyplot as plt
# %matplotlib inline

from sklearn.model_selection import train_test_split

"""## What's this?
Read the data using pandas. In this assignment you'll use `students_record_2.xlsx`.

*) You can find the file in IF-41-INT >> Week 2 >> Codes >> students_record_2.xlsx and upload it manually. I also provided the code below.
"""

from google.colab import files
uploaded = files.upload()

import io
df = pd.read_excel(io.BytesIO(uploaded['students_record_2.xlsx']))

# OUTPUT: return the dimension of our data (rows x columns)
def initial_info():
    print(df.head(10))
    return df.shape

# try your function here
print(initial_info())

"""## Watch Out! There's Outliers and Someone is Missing!

... I mean We miss 'Something'. Please check if any features has missing values and outliers in each features.
"""

# OUTPUT: return length of list of features that has outliers and/or missing value
def our_threats():
    # analyze missing value. write your code here
    print(df.isnull().any())

    # to analyze outliers you can use boxplot. write your code here
    plt.figure(figsize=(40, 40))
    f, axes = plt.subplots(1, 2)

    sns.boxplot(x=df["height"], ax=axes[0])
    sns.boxplot(x=df["weight"], ax=axes[1])
    
    plt.subplots_adjust(wspace=0.5) 
    plt.show() 
    
    # fill the lists below manually with the name of any features that have outliers and/or missing values
    has_missing_values = ["weight","mid exam score"]
    has_outliers = ["height","weight"]

    return len(has_missing_values) , len(has_outliers)

# try your function here
print(our_threats())

"""## Scale the Presence!

I know about your plan to skip some classes and after that your presence is not up to 75%. Now you'll try one of normalization method that is Min-Max to `presence` feature. After scaling the `presence` feature, the values will be in range [0,1].

Hint: use np.min() and np.max()
"""

# OUTPUT: return mean and median of feature 'presence' after normalization process
def normalization_min_max(presence):
    # write your code here. you can use Min-Max normalization formula
    presence = (presence - np.min(presence)) / (np.max(presence)-np.min(presence))
    
    return np.mean(presence), np.median(presence)

# try your function here
print(normalization_min_max(df['presence']))

"""## Can I mark up your mid exam score?

Hmm.. you think I can't do it, right? That's true. However there's student that doesn't have mid exam score. What's more proper to fill the missing value? Using median or mean of the data? In this case I fill the missing value with mean of the data. Why? Because it's suitable for continuous data without outliers. So, I'll fill it with mean of the data. Help me to fill it!
"""

# OUTPUT: return mean and median of feature 'mid exam score' after fill the missing value
# filling the missing data with mean
def fill_me():
    df['mid exam score'] = df['mid exam score'].fillna(np.mean(df['mid exam score']))
    
    return np.mean(df['mid exam score']), np.median(df['mid exam score']) # mean, median

# try your function here
print(fill_me())

"""## New Features

In this section you'll try how to add new features using existing features or we call it Feature Engineering. In this case you'll make 'BMI' feature that use `weight` and `height` features. [BMI formula](https://www.cdc.gov/healthyweight/assessing/bmi/childrens_bmi/childrens_bmi_formula.html).
"""

# OUTPUT: return all columns of data after feature engineering
def feature_engineering():
    # write your code here
    # BMI = weight / (height/100)^2
    df['BMI'] = df['weight'] / (df['height']/100)**2
    
    return list(df['BMI'])

# try your function here
print(feature_engineering())

"""## Split Up!

After you prepare the data, let's split the data into new two data frame. In this case you'll split the data to data train (70%) and data validation (30%).

Hint: I've already provided the function needed for splitting the data then you can use it easily. [references](https://scikit-learn.org/stable/modules/generated/sklearn.model_selection.train_test_split.html)
"""

# OUTPUT: return length of ROWS of data train and data validation
def split_data():
    # write your code here
    colArray =['weight','height','presence','average study time','mid exam score']
    y = df[colArray]
    X = df['is_pass']
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)
    
    return len(X_train), len(X_test) # train, validation

# try your function here
print(split_data())

"""## Congratulations You've Completed Assignment 1!

2020 &copy; [AS-793](https://www.linkedin.com/in/maxalmina/)
"""